#!/usr/bin/env ruby
require 'fileutils'
require 'lib/spinneret'
require 'drb'
require 'job_types'

DEFAULT_PROCESSES = 1

if ARGV.size == 1
  address = ARGV[0]
else
  address = "localhost:7005"
end

# Simulation Parameters
m_algs = Spinneret::Maintenance.constants
#maintenance_rate = [1000, 10000, 30000, 60000]
#maintenance_amount = [1, 3, 5, 10, 20]
#link_table_size = [10, 25, 50, 100] 
maintenance_rate = [1000, 10000, 30000]
maintenance_amount = [1, 3, 5, 10, 20]
link_table_size = [10, 25, 50, 100] 

jobs = []

#Connect to the job server object
DRb.start_service
$job_queue = DRbObject.new(nil, "druby://#{address}")

def create_job(exec)
  job = RJServe::Jobs::ShellExecute.new()
  job.parse_opt('-jc', exec)
  $job_queue.add_job(job)
end

def clear_and_make(dir)
  create_job("rm -rf #{dir} && mkdir -p #{dir}")
end

# Create directory for this run
bs_dir = File.join("data", "bootstrap")
clear_and_make(bs_dir)

SYNC_ROUNDS = 125

# Bootstrap Simulations
Dir.glob("workloads/bootstrap_*") do |workload|
  if workload =~ /\w+_n(\d+)_j(\d+)\.wlgz/
    nodes, join_time = $1.to_i, $2.to_i
  else
    puts "Invalid workload #{workload}"
    next
  end

  m_algs.each do | alg |
    next if alg == "Opportunistic"
    maintenance_rate.each do |m_rate|
      maintenance_amount.each do |m_amount|
        link_table_size.each do |table_size|
          job_dir = File.join(bs_dir, workload, m_rate.to_s, m_amount.to_s, table_size.to_s, alg)
          clear_and_make(job_dir)
          time = nodes * join_time + (table_size / m_amount * SYNC_ROUNDS * m_rate) / m_amount
          create_job("spin -w #{workload} -s #{m_amount} -t #{table_size} -m #{alg} -r #{m_rate} -d #{job_dir} -l #{time}")
        end
      end
    end
  end
end

