#!/usr/bin/env ruby

# == Synopsis
#
# rjserve: Run a generic job server
#
# == Usage
#
# rjserve [-n threads]
#
# -n number, --num-threads number
#     Number of threads to run processing inserted jobs.  Defualts to 1.

require 'rdoc/usage'
require 'drb'
require 'thread'

require 'job_types'

SERVER_ADDR = ":7005"

opts = GetoptLong.new(['--num-threads', '-n', GetoptLong::REQUIRED_ARGUMENT],
		      ['--address',     '-a', GetoptLong::REQUIRED_ARGUMENT])

num_threads = 1
server_addr = SERVER_ADDR
opts.each do | opt, arg |
  case opt
  when '--num-threads'
    num_threads = arg.to_i    
  when '--address'
    server_addr = arg
  else
    RDoc::usage
    exit(0)
  end
end

class RJobServer
  HEAD = :head
  TAIL = :tail

  def initialize
    @queue = []
    @queue_mutex = Mutex.new
  end

  def add_job(job, position = TAIL)
    @queue_mutex.synchronize do
      case position
      when HEAD
        @queue.insert(0, job)
      when TAIL
        @queue << job
      end
    end
  end

  def next
    job = nil
    @queue_mutex.synchronize do
      job = @queue.shift
    end
    return job
  end

  def get_queue
    return @queue.map { | entry | entry.to_s }
  end

end

printf("Ruby job starting up on %s...", server_addr)
server = RJobServer.new
DRb.start_service("druby://#{server_addr}", server)
printf("done.  Waiting for jobs.\n")

num_children = 0
i = 0
while(1)
  if num_children == num_threads
    Process.wait
    num_children -= 1
  end
  
  job = nil
  while(job.nil?)
    job = server.next
    sleep 0.01
  end

  puts "Currently spawning job #{i}"
  sleep 1.0  # make sure the previous command has started to allow for 
             # command chains.  bad solution to a shity problem.
  num_children += 1
  i += 1
  fork do
    puts "Running #{job}."
    job.run
  end
end

# replace with main loop
DRb.thread.join # Don't exit just yet!
