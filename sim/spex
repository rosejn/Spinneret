#!/usr/bin/env ruby

# == Synopsis
#
# Spex, the SPace-EXplorer, will load the given space exploration
# file (.sx) and execute the spin simulation driver for all experiments
# created.  If supplied with a job server spex can load jobs onto a remote
# computer.  
#
# == Usage
#
# -h, --help:
#    Show this help
#
# -j host[:port] or --rjserver host[:port]
#    Give the ip address and port of the job server.  Defaults to #
#    localhost:7005.
#
# = Example:
#   spex -j megabox.net foo.sx 
#   spex -j megabox.net:7005 foo.sx 


$:.unshift "../lib"
$:.unshift "script/rjserve"

require 'rdoc/usage'
require 'fileutils'
require 'spinneret'
require 'drb'
require 'job_types'

class Exploration
  def self.load(filename)
    e = new
    
    # 2nd filename and line number for error reporting
    e.instance_eval(File.read(filename) + "\nsend_experiment()",
                    filename, 0) 
    e.finalize
    e
  end

  def initialize
    @current_experiment = nil
    @params = {}
    
    # Create or connect to the job server object
    if $server_addr.nil?
      require 'rjserve'
      @job_queue = RJobServer.new
      @remote = false
    else
      DRb.start_service
      @job_queue = DRbObject.new(nil, "druby://#{$server_addr + ':' + $server_port.to_s}")
      @remote = true
    end
  end

  def defaults(vals)
    @default_params = vals
  end

  def add_param(name, vals)
    @params[name] = vals
  end

  # If we are processing locally wait until all the jobs complete.
  def finalize
    if not @remote
      @job_queue.wait_for_jobs
    end
  end

  def to_s
    @default_params.each do |param, vals|
      puts "#{param}: #{vals.inspect}"
    end

    @params.each do |param, vals|
      puts "#{param}: #{vals.inspect}"
    end
  end

  def set(name, list)
    add_param(name, list)
  end

  def static(name, val)
    add_param(name, val)
  end

  def linear(name, start, stop, stride = 1)
    vals = []
    v = start
    while v <= stop
      vals << v
      v = v + stride
    end

    add_param(name, vals)
  end

  def log(name, start, stop, n = 2)
    vals = []
    v = start
    while v <= stop
      vals << v
      v *= n
    end

    add_param(name, vals)
  end

  def new_experiment(name)
    send_experiment unless @current_experiment.nil?
    @current_experiment = name
    @params = {}

    puts "    Creating new experiment: #{name}"
  end
  alias :experiment :new_experiment

  def job(exec)
    job = RJServe::Jobs::ShellExecute.new()
    job.parse_opt('-jc', exec)
    job
  end

  def make_fresh_dir(path)
    "rm -rf #{path} && mkdir -p #{path}"
  end

  def dump_config(dir, params)
    "echo \"#{YAML::dump(params)}\" > #{File.join(dir, "config")}"
  end

  def job_dir(param_set)
    base = @current_experiment.gsub(' ', '_')

    # Just use the base directory if no parameters are passed
    return base if param_set.empty?

    puts "base: " + base
    puts "param_set: " + param_set.inspect

    name = ""
    param_set.each {|param, val| name << "__#{param}-#{val}" }
    File.join(base, name[2..-1])
  end

  def send_experiment
    params = build_param_list(@params.to_a)

    @num_jobs = 0 

    # Run a single test with defaults if no parameters are being explored
    if params.empty?
      send_job({})
    else
      params.each {|param_set| send_job(param_set) }
    end

    puts "\t\t#{@num_jobs} runs sent!\n"
  end

  def send_job(param_set)
    jc = RJServe::Jobs::JobChain.new
    dir = job_dir(param_set)
    puts "output dir: " + dir
    param_set['analyzer.output_path'] = dir

    jc << job( make_fresh_dir(dir) )
    jc << job( dump_config(dir, @default_params.merge(param_set)) )
    jc << job( "spin --config #{File.join(dir, "config")}" )

    @num_jobs += 1
    @job_queue.add_job(jc)
  end

  def build_param_list(params)
    return [] if params.empty?

    name, vals = params.pop
    vals = [vals].flatten

    if params.empty?
      results = vals.map {|v| {name => v}}
    else
      current = build_param_list(params)

      results = []
      vals.each do |v|
        current.each do |pars|
          p = pars.dup
          p[name] = v
          results << p
        end
      end
    end

    results
  end
end

opts = GetoptLong.new(
        ['--help',                   '-h', GetoptLong::NO_ARGUMENT],
        ['--rjserver',               '-j', GetoptLong::OPTIONAL_ARGUMENT] )

opts.each do | opt, arg |
  case opt
  when '--help'
    RDoc::usage
  when '--rjserver'
    $server_addr = 'localhost' # If passed with no args we default to localhost
    $server_port = 7005

    $server_addr, $server_port = arg.split(':') if arg
    $server_port ||= 7005 # In case a port wasn't specified
  end
end

RDoc::usage if ARGV.empty?

# Process all the config files passed to the application
puts "Commencing with Space Exploration:\n\n"

config = ARGV[0]
puts "  Loading parameter file: #{config}"
Exploration.load(config)
