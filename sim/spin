#!/usr/bin/env ruby


# == Synopsis
#
# spin: Run a spinneret simulation
#
# == Usage
#
# spin [-w workload] 
#
# -h, --help:
#    Show this help
#
# -v, --verbose
#    Be verbose with simulation details.  This is slow, and is off by default.
#
# -d directory, --output-dir directory
#     Put the results of a run into the specified directory.
#
# -w filename, --workload filename
#    Set the input workload.  Workloads are generated with 
#    script/gen_workload.
#
# -l num, --max-length num
#    The maximum amount of time to allow the simulation to run
#
# -a num, --address-space num
#    Temporary argument until the framework reads the number out of the
#    workload file.  Must be the same as the workload, or your distance
#    function may break.
#
# -m type, --maintenance type
#    Selects a maintenance type.  Use '--maintenance help' to get a list of
#    currnetly supported types.  Default is pull.
#
# -s num, --maintenance-size num
#    The number of peers the given maintenance protocol should use during
#    exchange.  This may not map well onto all protocols.  Defaults to 5.
#
# -t num, --maintenance-table-size num
#    The size of the link table.  Defaults to LinkTable::MAX_PEERS.
#
# -r num, --maintenance-rate num
#    The rate of maintenance.  Defaults to Node::DEFAULT_MAINTENANCE_PERIOD
#
# -c time, --converge-quit time
#    If the network has been converged for greater than time ticks, stop the
#    simulation.
#
# -y time, --analysis-measurement time
#    The time between runs of the analysis engine.
#

require 'rdoc/usage'
require 'yaml'
require 'rubygems'
$:.unshift(File.dirname(__FILE__) + '/../lib')
$:.unshift(File.dirname(__FILE__))

require 'spinneret'
require 'English'

require 'script/workload_parser'
require 'script/spin_sim'
#require 'script/mem_prof'

#MemoryProfiler.start

srand 0

GoSim::Data::DataSet::silent()

opts = GetoptLong.new(
        ['--help',                   '-h', GetoptLong::NO_ARGUMENT],
        ['--verbose',                '-v', GetoptLong::NO_ARGUMENT],
        ['--config',                 '-f', GetoptLong::REQUIRED_ARGUMENT],
        ['--converge-quit',          '-c', GetoptLong::REQUIRED_ARGUMENT],
        ['--output-dir',             '-d', GetoptLong::REQUIRED_ARGUMENT],
        ['--workload',               '-w', GetoptLong::REQUIRED_ARGUMENT],
        ['--max-length',             '-l', GetoptLong::REQUIRED_ARGUMENT],
        ['--address-space',          '-a', GetoptLong::REQUIRED_ARGUMENT],
        ['--maintenance',            '-m', GetoptLong::REQUIRED_ARGUMENT],
        ['--maintenance-size',       '-s', GetoptLong::REQUIRED_ARGUMENT],
        ['--maintenance-table-size', '-t', GetoptLong::REQUIRED_ARGUMENT],
        ['--maintenance-rate',       '-r', GetoptLong::REQUIRED_ARGUMENT],
        ['--analysis-measurement',   '-y', GetoptLong::REQUIRED_ARGUMENT] )

$pad = Scratchpad::instance
$config = Configuration::instance

$config.sim_length = 0
$config.workload = nil
$config.converge_quit = -1

# Load the hash names into the hierarchical config structure
def load_config(config_hash)
  config_hash.each do |name, value|
    levels = name.split('.')
    final = levels.pop

    set_point = levels.inject($config) {|conf, val| conf.send(val) }
    set_point.send(final + '=', value)
  end
end

opts.each do | opt, arg |
  case opt
  when '--help'
    RDoc::usage
  when '--verbose'
    GoSim::Simulation.instance.verbose
  when '--config'
    load_config(YAML::load(File.read(arg)))

  when '--converge-quit'
    $config.converge_quit = arg.to_i
  when '--output-dir'
    $config.analyzer.output_path = arg
  when '--workload'
    $config.workload = arg
  when '--max-length'
    $config.sim_length = arg.to_i
  when '--address-space'
    $config.link_table.address_sapce = arg.to_i
  when '--maintenance'
    $config.node.maintenance_algorithm = arg
  when '--maintenance-size'
    $config.node.maintenance_size = arg.to_i
  when '--maintenance-table-size'
    $config.link_table.max_peers = arg.to_i
  when '--maintenance-rate'
    $config.node.maintenance_rate = arg.to_i
  when '--analysis-measurement'
    $config.analyzer.measurement_period = arg.to_i
  end
end

$pad.nodes = nodes = []

# make sure the maintenance type is valid
def maintenance_help
  puts "Valid maintenance types are:"
  Spinneret::Maintenance.constants.each { |cls| puts "  #{cls.to_s}" }
  puts "Note that capitalization *is* important and that Opportunistic is"
  puts "note a valid maintenance mode by itself."
end

if $config.node.maintenance_algorithm == "help"
  maintenance_help(); 
  exit(0) 
end

# Upcap the first character, but do not lower case the others like .capitalize
# would
if $config.node.maintenance_algorithm.class != Module
  m = $config.node.maintenance_algorithm
  m = (m[0].chr.upcase + m[1..-1]).to_sym
  if !Spinneret::Maintenance.const_defined?(m)
    puts "Invalid maintenance type \'#{m.to_s}\'."
    maintenance_help()
    exit(1)
  else
    $config.node.maintenance_algorithm = Spinneret::Maintenance.const_get(m)
  end
end

["SIGINT", "TERM"].each do | sig |
  Signal.trap(sig) {
    puts "Quiting"
    GoSim::Data::DataSetWriter.instance.close()
    exit
  }
end

Spinneret::Analyzer::instance.enable # Add the Analysis generation
#Spinneret::Analyzer::instance.disable
#workload_path = File.join(File.dirname(__FILE__), 
#                          'workloads', $config.workload + '.wlgz')
workload_path = File.join(File.dirname(__FILE__), $config.workload)

Spin::Simulation::instance.setup(workload_path, $config.sim_length, $config.converge_quit)

if(__FILE__ != $PROGRAM_NAME && File::basename($PROGRAM_NAME) != "rdebug")
  # Do stuff for goviz version - this activates the simulation seperately,
  # intigrating with the GTK mainloop
  require 'util/spin_viz'
else
  Spin::Simulation::instance.run
end

at_exit { GoSim::Data::DataSetWriter.instance.close }


