#!/usr/bin/env ruby
 
# == Synopsis
#
# spin: Run a spinneret simulation
#
# == Usage
#
# spin [-w workload] 
#
# -h, --help:
#    Show this help
#
# -v, --verbose
#    Be verbose with simulation details.  This is slow, and is off by default.
#
# -d directory, --output-dir directory
#     Put the results of a run into the specified directory.
#
# -w filename, --workload filename
#    Set the input workload.  Workloads are generated with 
#    script/gen_workload.
#
# -l num, --max-length num
#    The maximum amount of time to allow the simulation to run
#
# -a num, --address-space num
#    Temporary argument until the framework reads the number out of the
#    workload file.  Must be the same as the workload, or your distance
#    function may break.
#
# -m type, --maintenance type
#    Selects a maintenance type.  Use '--maintenance help' to get a list of
#    currnetly supported types.  Default is pull.
#
# -s num, --maintenance-size num
#    The number of peers the given maintenance protocol should use during
#    exchange.  This may not map well onto all protocols.  Defaults to 5.
#
# -t num, --maintenance-table-size num
#    The size of the link table.  Defaults to LinkTable::MAX_PEERS.
#
# -r num, --maintenance-rate num
#    The rate of maintenance.  Defaults to Node::DEFAULT_MAINTENANCE_PERIOD
#
# -c time, --converge-quit time
#    If the network has been converged for greater than time ticks, stop the
#    simulation.
#
# -y time, --analysis-measurement time
#    The time between runs of the analysis engine.
#

require 'rdoc/usage'

$:.unshift(File.dirname(__FILE__) + '/../lib')

require 'spinneret'
require 'English'

require 'util/workload_parser'
require 'util/spin_sim'

srand 0

opts = GetoptLong.new(
        ['--help',                   '-h', GetoptLong::NO_ARGUMENT],
        ['--verbose',                '-v', GetoptLong::NO_ARGUMENT],
        ['--converge-quit',          '-c', GetoptLong::REQUIRED_ARGUMENT],
        ['--output-dir',             '-d', GetoptLong::REQUIRED_ARGUMENT],
        ['--workload',               '-w', GetoptLong::REQUIRED_ARGUMENT],
        ['--max-length',             '-l', GetoptLong::REQUIRED_ARGUMENT],
        ['--address-space',          '-a', GetoptLong::REQUIRED_ARGUMENT],
        ['--maintenance',            '-m', GetoptLong::REQUIRED_ARGUMENT],
        ['--maintenance-size',       '-s', GetoptLong::REQUIRED_ARGUMENT],
        ['--maintenance-table-size', '-t', GetoptLong::REQUIRED_ARGUMENT],
        ['--maintenance-rate',       '-r', GetoptLong::REQUIRED_ARGUMENT],
        ['--analysis-measurement',   '-y', GetoptLong::REQUIRED_ARGUMENT] )

pad = Scratchpad::instance
config = Configuration::instance

sim_length = 0
converge_quit = -1
workload = topology = nil

opts.each do | opt, arg |
  case opt
  when '--help'
    RDoc::usage
  when '--verbose'
    GoSim::Simulation.instance.verbose
  when '--converge-quit'
    converge_quit = arg.to_i
  when '--output-dir'
    config.analyzer.output_path = arg
  when '--workload'
    workload = arg
  when '--max-length'
    sim_length = arg.to_i
  when '--address-space'
    config.link_table.address_sapce = arg.to_i
  when '--maintenance'
    config.node.maintenance_algorithm = arg
  when '--maintenance-size'
    config.node.maintenance_size = arg.to_i
  when '--maintenance-table-size'
    config.link_table.max_peers = arg.to_i
  when '--maintenance-rate'
    config.node.maintenance_rate = arg.to_i
  end
end

if((workload.nil? && topology.nil?) || 
   (workload.nil? && config.link_table.address_space == 0))
  puts "Not enough arguments:"
  puts "\tPlease specify either --workload and/or --topology"
  puts "\tNote that --topology must be accompanied by --address-space\n\n"
  RDoc::usage

  exit(0)
end

if(topology)
  puts "Topologies are not currently supported.\n"
  exit(0)
end

pad.nodes = nodes = []

# make sure the maintenance type is valid
def maintenance_help
  puts "Valid maintenance types are:"
  Spinneret::Maintenance.constants.each { |cls| puts "  #{cls.to_s}" }
  puts "Note that capitalization *is* important."
end

if config.node.maintenance_algorithm == "help"
  maintenance_help(); 
  exit(0) 
end

# Upcap the first character, but do not lower case the others like .capitalize
# would
if config.node.maintenance_algorithm.class != Module
  m = config.node.maintenance_algorithm
  m = (m[0].chr.upcase + m[1..-1]).to_sym
  if !Spinneret::Maintenance.const_defined?(m)
    puts "Invalid maintenance type \'#{m.to_s}\'."
    maintenance_help()
    exit(1)
  else
    config.node.maintenance_algorithm = Spinneret::Maintenance.const_get(m)
  end
end

Signal.trap("SIGINT") {
  puts "Quiting"
  GoSim::DataSet::close()
  exit
}

Spinneret::Analyzer::instance.enable # Add the Analysis generation

Spin::Simulation::instance.setup(workload, sim_length, converge_quit)
if(__FILE__ != $PROGRAM_NAME)
  # Do stuff for goviz version
  require 'util/spin_viz'
else
  Spin::Simulation::instance.run
end

