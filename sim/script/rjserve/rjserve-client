#!/usr/bin/env ruby

# == Synopsis
#
# rjserve-client: Add a job to a rjserve instance
#
# == Usage
#
# rjserve-client -a address [-j jobtype] [-p position] -- [job arguments]
#
# -h, --help
#     Prints this help.
#
# -l, --list-jobs
#     List all jobs currently in the queue.
#
# -x, --kill-queue
#     Delete all jobs.  Lets currently running jobs finish.
#
# -a ip:port, --server-address ip:port
#     Specify the IP and port number of the rjserve process.  The IP can be
#     numerical or a symbolic domain name, and the port can be left out if the
#     server uses the default, 7005.
#
# -j class_name, --job-type class_name
#     The job class that will represent the job.  Defaults to ShellExecute,
#     which taks the -jc flag to specify the command to run.  Any module should
#     take the -jh option, which will force it to print it's help documentation.
#     Note that this option must be specified before any argument options so
#     that rjserve-client knows which job type to pass them to.
#
#     Note that arguments to jobs *must* be preceeded by '--'.  An example:
#        rjserve-client -a localhost:7005 -- -jc 'ls -l > output'
#
# -p position, --queue-position position
#     The position in which the job should be inserted.  Only two values are
#     currently allowed: head and tail.  Defaults to tail.
#
# -r start-end, --remove-jobs start-end
#     Remove listed jobs from the queue.  The argument can be a range or a
#     single job number.  For example:
#        rjserve-client -r 45-78
#     removes jobs 45-78, inclusive, and
#        rjserve-client -r 45
#     removes only job 45.

require 'rdoc/usage'
require 'drb'

require 'job_types'

opts = GetoptLong.new(['--server-address', '-a', GetoptLong::REQUIRED_ARGUMENT],
                      ['--job-type',       '-j', GetoptLong::REQUIRED_ARGUMENT],
                      ['--queue-position', '-p', GetoptLong::REQUIRED_ARGUMENT],
                      ['--list-jobs',      '-l', GetoptLong::NO_ARGUMENT],
                      ['--remove-jobs',    '-r', GetoptLong::REQUIRED_ARGUMENT],
                      ['--kill-queue',     '-x', GetoptLong::NO_ARGUMENT],
                      ['--help',           '-h', GetoptLong::NO_ARGUMENT]
                     )

def find_class(mod, name)
  sym = (name[0].chr.upcase + name[1..-1]).to_sym
  return nil if !mod.const_defined?(sym)
  return mod.const_get(maintenance)
end

address = ":7005"
list = kill = false
delete = []
job = RJServe::Jobs::ShellExecute.new()
queue_pos = :tail
opts.each do | opt, arg |
  case opt
  when '--server-address'
    address = arg
  when '--job-type'
    job = find_class(RJServe::Jobs, arg)
    if job.nil?
      puts "Valid generator types are:"
      RJServe::Jobs.constants.each { |cls| puts "  #{cls.to_s}" }
      puts "Note that capitalization *is* important."
      exit(1)
    else
      job = job.new()
    end
  when '--queue-position'
    queue_pos = (arg == "head" ? :head : :tail)
  when '--list-jobs'
    list = true
  when '--remove-jobs'
    delete = arg.split('-').map { | x | x.to_i }
  when '--kill-queue'
    kill = true
  when '--help'
    RDoc::usage
    exit(0)
  end
end

while !ARGV.empty?
  opt, arg = ARGV.shift, ARGV.shift
  job.parse_opt(opt, arg)
end

if (!job.runnable?) && (!list && delete.empty? && !kill)
  puts "Must provide at least the address and a complete job."
  exit(0)
end

DRb.start_service
job_queue = DRbObject.new(nil, "druby://#{address}")

if list
  job_queue.get_queue.each { | e | printf("%d: %s\n", e[1], e[0]) }
end

if !delete.empty?
  if delete.length == 2
    range = (delete[0]..delete[1])
  else
    range = delete[0]
  end
  job_queue.clear_entries(range)
end

if kill
  job_queue.clear_queue()
end

if job.runnable?
  job_queue.add_job(job, queue_pos)
end
