#!/usr/bin/env ruby

# == Synopsis
#
# calc_rwalk_probs: Analyze graph reachability properties
#
# == Usage
#
# -h, --help:
#    Show this help.
#
# -o filename, --output filename
#
# -i filename, --input filename
#
# -e, --ergodic
#
# -s, --eigen
#    Find the eigen vector of the first eigen value (1) and then take the
#    single-value decomposition.  This is an alternative method of finding the
#    static distribution.
#
# -r length, --random-walk length 
#    Optional argument

require 'rdoc/usage'
require 'getoptlong'

require 'rubygems'
require 'gsl'

require 'spinneret'

require 'stream_types'

#require 'profile'

$verbose = false

class PathTransitionMatrix

  def initialize(stream)
    @graph = RGL::DirectedAdjacencyGraph.new().read_from_dot(stream)
    @matrix = GSL::Matrix.alloc(@graph.num_vertices, @graph.num_vertices)

    @cur_name = 0
    @vertex_names = {}
    @args = {}
  end

  def set_args(hash)
    @args.merge!(hash)
  end

  private

  def get_name(v)
    if !@vertex_names.has_key? v
      @vertex_names[v] = @cur_name  
      @cur_name += 1
    end

    return @vertex_names[v]
  end

end

class GraphRandomWalk < PathTransitionMatrix
  DEFAULT_WALK_LENGTH = 40

  def initialize(stream, length = DEFAULT_WALK_LENGTH)
    super(stream)
    @converged = false
    @vert_edges = {}
    @args[:length] = length  # possibly overwritten by a call to set_args()
  end

  def converge
    verts = @graph.vertices

    puts "Using random walks of length #{@args[:length]}." if $verbose
    
    prev_probs = GSL::Matrix.alloc(@graph.num_vertices, @graph.num_vertices)
    i = 0
    while(!@converged)
      verts.each do | v |
        #puts "0x#{v.to_s[0..10]}..." if $verbose
        verts.size.times do
          u = v
          @args[:length].times { u = vertices(u).rand() }

          v_name, u_name = get_name(v), get_name(u)
          @matrix.set(v_name, u_name, @matrix.get(v_name, u_name) + 1)
        end
      end

      @probs = normalize(@matrix, (i + 1) * verts.size)
      @converged = @probs.equal?(prev_probs)

      if(i % 10 == 4)
        if $verbose
          puts "#{i+1} steps have passed (sqme #{(@probs - prev_probs).norm})"
        end
        f = File.new("#{i+1}.probs", "w")
        write_node_probs(f)
        f.close() # force flush in case of early exit
      end
      i += 1

      prev_probs = @probs
    end  # !converged

  end

  def write_node_probs(stream)
#    return unless @converged
  
    @vertex_names.each do | key, value |
      # Note, all rows should be created equal, but maybe we should average
      # here instead of just picking the first one
      col = @probs.col(value)
      stream.write("#{key} #{col[0]} #{col.sum / col.size}\n")
    end
  end

  private

  def vertices(v)
    if !@vert_edges.has_key?(v)
      @vert_edges[v] = @graph.adjacent_vertices(v)
    end

    return @vert_edges[v]
  end

  def normalize(matrix, trials)
    new_matrix = GSL::Matrix.alloc(@graph.num_vertices, @graph.num_vertices)

    matrix.size1.times do | i | 
      row = matrix.get_row(i)
      sum = row.sum
      row.collect! { | val | val / sum }
      new_matrix.set_row(i, row)
    end

    return new_matrix
  end

end

class ErgodicTransitionMatrix < PathTransitionMatrix

  def initialize(stream)
    super(stream)

    @converged = nil
  end

  def write_node_probs_dot(stream)
    return unless @converged

    @vertex_names.each do | key, value |
      # Note, all rows should be created equal, but maybe we should average
      # here instead of just picking the first one
      vec = GSL::Vector::alloc(@converged.col(value))
      @graph.add_vertex_property(key, :prob_rwalk_mean, Stats::mean(vec))
      @graph.add_vertex_property(key, :prob_rwalk_sd, Stats::sd(vec))
    end

    stream << @graph.to_dot()
  end

  def write_node_probs(stream)
    return unless @converged

    @vertex_names.each do | key, value |
      vec = GSL::Vector::alloc(@converged.col(value))
      stream.write("#{key} #{Stats::mean(vec)} #{Stats::sd(vec)}\n")
    end
  end

  def converge
    generate_matrix()

    puts "Performing convergence..." if $verbose

    res = @matrix ^ 2
    @converged = res * @matrix

    i = 0
    while !res.equal?(@converged)
      res = @converged
      @converged = @converged * @matrix

      if(i % 10 == 9)
        if $verbose
          puts "#{i+1} steps have passed (sqme #{(@converged - res).norm})"
        end
      end
      i += 1
    end

    puts "#{i+1} steps have passed - converged" if $verbose
  end

  private

  def generate_matrix
    puts "Generating..." if $verbose
    @graph.each_vertex do | v |
      adj_v = @graph.adjacent_vertices(v)
      size = adj_v.length.to_f
      adj_v.each do | u |
        @matrix.set(get_name(v), get_name(u), 1.0 / size)
      end
    end

    puts "Checking..." if $verbose
    error = false
    @matrix.each_row { | row | error = true unless row.sum == 1.0 }
    puts "WARN: Possible precision problems. Usually not serious." if error

    # Check if there was a debug request - this format can be imported easily
    # into octave.
    if @args.has_key?(:print_transition_matrix)
      puts "# name: P"
      puts "# type: matrix"
      puts "# rows: #{@matrix.size1}"
      puts "# columns: #{@matrix.size2}"
      @matrix.each_row do | row |
        str = []
        row.each { | val | str << val.to_s }
        puts str.join(" ")
      end
    end
  end

end

class ErgodicEigenSolver < ErgodicTransitionMatrix
  def initialize(stream)
    super(stream)
  end

  def write_node_probs_dot(stream)
    return unless @converged

    @vertex_names.each do | key, value |
      @graph.add_vertex_property(key, :prob_rwalk_mean, @final[value])
      # there is no sd, as we are not averaging across a set of values
      # in a "converged" matrix
      @graph.add_vertex_property(key, :prob_rwalk_sd, 0.0)
    end

    stream << @graph.to_dot({"mixing_time_bound" => @mix_time_l})
  end

  def write_node_probs(stream)
    return unless @converged

    @vertex_names.each do | key, value |
      stream << "#{key} #{@final[value]} #{0.0}\n"
    end
  end

  def converge
    generate_matrix()  # generates the traditional src->dest matrix
                       # but we take the transpose below in order to
                       # get the dest<-src form needed for the right
                       # eigenvector to make sense.

    puts "Performing decomposition, solving for eigenvectors..." if $verbose

    eigval, eigvec = Eigen::nonsymmv(@matrix.transpose)
    Eigen::nonsymmv_sort(eigval, eigvec, GSL::Eigen::SORT_ABS_DESC)

    puts eigval[0]
  
    if eigval[0].imag != 0 
      if eigval[0].real.deltafrom(1.0, 0.0001)
        throw "No solution found using eigen solver"  
      end
    end

    sol = eigvec.col(0)
    arr = []
    sol.each do | val |
      if val.imag == 0
        arr << val.real
      else
        throw "eigenvector corresponding to eigenvalue 1 has imaginary components!"
      end
    end
    sol = GSL::Vector::alloc(arr)

    @final = sol / sol.sum
    @mix_time_l = Math::log(@vertex_names.length) / 1.0 - eigval[1].real

    @converged = true
  end

end

def puts(str)
  $stderr.puts str
end

opts = GetoptLong.new(
        ['--help',                   '-h', GetoptLong::NO_ARGUMENT],
        ['--output',                 '-o', GetoptLong::REQUIRED_ARGUMENT],
        ['--input',                  '-i', GetoptLong::REQUIRED_ARGUMENT],
        ['--ergodic',                '-e', GetoptLong::NO_ARGUMENT],
        ['--eigen',                  '-s', GetoptLong::NO_ARGUMENT],
        ['--initial-matrix',         '-t', GetoptLong::NO_ARGUMENT],
        ['--random-walk',            '-r', GetoptLong::OPTIONAL_ARGUMENT],
        ['--verbose',                '-v', GetoptLong::NO_ARGUMENT])

output = $stdout
input = $stdin
convergence_class = nil
eigen_converge = false
args = {}
opts.each do | opt, arg |
  case opt
  when '--help'
    RDoc::usage
    exit(0)
  when '--output'
    output = get_output_stream(arg)
  when '--input'
    input = get_input_stream(arg)
  when '--ergodic'
    convergence_class = ErgodicTransitionMatrix
  when '--random-walk'
    convergence_class = GraphRandomWalk
    args[:length] = arg.to_i unless arg.nil?
  when '--eigen'
    convergence_class = ErgodicEigenSolver
  when '--initial-matrix'
    args[:print_transition_matrix] = true
  when '--verbose'
    $verbose = true
  end
end

if(output.nil? || input.nil? || convergence_class.nil?)
  RDoc::usage
  exit(-1)
end

p = convergence_class.new(input)
p.set_args(args)
puts "Running convergence..." if $verbose
p.converge
p.write_node_probs_dot(output)
output.close()      # Have to explicitly close gzip streams
puts "Done." if $verbose
