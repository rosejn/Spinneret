#! /usr/bin/env ruby

# == Synopsis
#
# gen-substrate-wl: Generates a workload for spinneret tests
#
# == Usage
#
# gen-substrate-wl [OPTIONS]
#
# -h, --help
#    Show this help
#
# -o filename, --filename filename
#    Sets the output file
#
# -l num, --sim-max-length num
#    Sets the maximum length of the generated workload
#
# -a num, --address-space num
#    The address space of the workload
#
# -n num, --num-nodes num
#    Number of nodes in network
#
# -z, --all-joins-first
#    All nodes join the network before any queries are issued.
#
# -j secs, --mean-join-time secs
#    Time between nodes joining the network, where 0 is instantanious.  0 is
#    the default.
#
# -x secs, --mean-failure-time secs
#    Time between failure for each node, where 0 is no failure.  0 is the 
#    default.
#
# -q secs, --mean-leave-time secs
#    Mean time before a node leaves the network, where 0 is never.  0 is the 
#    default.
#
# -r secs, --mean-rejoin-time secs
#    Mean time before a node rejoins the network after leaveing or a failure,
#    where 0 indicates nodes to not rejoin.  0 is the default.
#
# -s secs, --mean-search-time secs
#    Time between searching for each node, where 0 is no search.  0 is the 
#    default.
#
# -t types, --search-types types
#    Specifies the search types.  Each type is a pair, name:pct, where name
#    specifies the type and pct the percent of the time it occurs.  Multiple
#    types can be given if they are separated with commas:
#        dht:0.2,kwalk:0.8
#    would create a workload with 20% DHT searches, and 80% random k-walker
#    searches.  Note that the sum of the probabilities must be <= to 1.0.
#    Defaults to
#        dht:0.5,kwalk:0.5
#
# -c, --converge-before-search
#    Don't start the searches before converging.  This inserts a non-timed
#    event, which effectively pauses the trace until maintenance converges the
#    network.  All timed events after this non-timed event are treated as being
#    relative to the time of convergence.
#
#    Forces -z to true.
#
# -f time:pct, --static-failure time:pct
#    Create a static failure in the network of pct percent nodes at time.  For
#    example:
#        -f 60000:0.5
#    would create a static failure of 50% of all nodes at time 60000 (60
#    seconds).  Defaults to 0:0.0
#
# -. time, --end-of-trace-flush time
#    Force the simulator to exit time units after the end of the trace.
# 
# -i type, --id-type type
#    Set the generator type for ID creation.  Current options include:
#        random   [Random IDs from a uniform continous distribution]
#        uniform  [Uniformly spaced IDs]

######
# The basic FSM for this generator is as follows:
#
#   join    ---------   leave    ------ 
# -------->| running |--------->| left |
#       --> ---------            ------ 
#      /    /    ^  \                ^
#     /    /      \  \failure        |
#     |    |      |   \    --------  | leave
#     |     \    /     \->| failed |-/
#     |      ----          -------- 
#     |     search             |
#     |                       /
#     \----------------------/
#             recover
#
######

$:.unshift(File.dirname(__FILE__) + '/../../lib')

# Builtins
require 'singleton'
require 'getoptlong'
require 'rdoc/usage'

require 'rubygems'
require 'gosim'

require 'spinneret/math_ext'

# Externals
require 'gsl'
require 'zlib'

DEFAULT_SEARCH_TYPE = "dht:0.5,kwalk:0.5"
DEFAULT_STATIC_FAILURE = "0:0.0"

module IDGens
  class BaseGen
    def initialize(settings)
      @settings = settings
    end
  end

  class Random < BaseGen
    def gen
      rand(@settings.addr_space)
    end
  end

  class Uniform < BaseGen
    def initialize(settings)
      super(settings)
      
      @id = 0
      @incr = @settings.addr_space / @settings.num_nodes
      @addrs = [0]
      (@settings.num_nodes - 1).times { @addrs << @id += @incr }
    end

    def gen
      if @addrs.empty?
        puts "Error - more calls to Uniform.gen than nodes in network!"
        exit(-2) 
      end

      id = @addrs.rand()
      @addrs.delete(id)
      return id
    end
  end
end

class WLPrinter
  include Singleton

  def init(sim, file)
    @sim = sim
    @last_time = -1
    @file = file
    @converge_time = 0
  end

  def printf(fmt_str, *args)
    if(@sim.time > @last_time)
      @last_time = @sim.time
      @file.write("time #{@sim.time - @converge_time}\n")
    end

    @file.write(sprintf(fmt_str, *args))
  end

  def set_pause_point
    @converge_time = @sim.time
  end

  def flush()
    @file.close()
  end
end

class Killer < GoSim::Entity
  def initialize(end_time)
    super()

    @sim.schedule_event(:die, @sid, end_time, nil)
  end

  def die(e)
    WLPrinter.instance.flush()
    exit(0)
  end
end

class StaticFailureHandler < GoSim::Entity
  def initialize(time, pct)
    super()

    set_timeout(time) do
      nodes = NodeList::instance.nodes

      num_fail = (nodes.length * pct).to_i
      while(num_fail > 0)
        n = nodes.rand

        #if we aren't alive, then find one that is
        next if n.left == true

        #else kill the node
        @sim.schedule_event(:failure, n.sid, 0, false)
        num_fail -= 1
      end
    end
  end
end

class SearchType
  attr_reader :name, :prob

  def initialize(name, prob)
    @name, @prob = name, prob.to_f
  end
end

def parse_search_types(types_str)
  types = types_str.split(',').map { | t | SearchType.new(*t.split(':')) }
  tot_prob = 0.0
  types.each { | t | tot_prob += t.prob }
  if tot_prob > 1.0
    puts "Total search probability is more than 1.0.\n"
    exit(2)
  end

  return types
end

def choose_search_method(types)
  tot_prob = 0.0
  types.each { | type | tot_prob += type.prob }

  types.each do | type |  
    if rand() < type.prob / tot_prob
      return type
    end
    tot_prob -= type.prob
  end

  nil
end

opts = GetoptLong.new(
        ['--help',                   '-h', GetoptLong::NO_ARGUMENT],
        ['--filename',               '-o', GetoptLong::REQUIRED_ARGUMENT],
        ['--sim-max-length',         '-l', GetoptLong::REQUIRED_ARGUMENT],
        ['--address-space',          '-a', GetoptLong::REQUIRED_ARGUMENT],
        ['--num-nodes',              '-n', GetoptLong::REQUIRED_ARGUMENT],
        ['--all-joins-first',        '-z', GetoptLong::NO_ARGUMENT],
        ['--mean-session-time',      '-x', GetoptLong::REQUIRED_ARGUMENT],
        ['--mean-leave-time',        '-q', GetoptLong::REQUIRED_ARGUMENT],
        ['--mean-rejoin-time',       '-r', GetoptLong::REQUIRED_ARGUMENT],
        ['--mean-search-time',       '-s', GetoptLong::REQUIRED_ARGUMENT],
        ['--search-types',           '-t', GetoptLong::REQUIRED_ARGUMENT],
        ['--static-failure',         '-f', GetoptLong::REQUIRED_ARGUMENT],
        ['--converge-before-search', '-c', GetoptLong::NO_ARGUMENT],
        ['--pause-after-joins',      '-p', GetoptLong::REQUIRED_ARGUMENT],
        ['--end-of-trace-flush',     '-.', GetoptLong::REQUIRED_ARGUMENT],
        ['--id-type',                '-i', GetoptLong::REQUIRED_ARGUMENT])

Settings = Struct.new("Settings", :addr_space, :join_first, 
                                  :mxt, :mjt, :mft, :mlt, :mrt, :mst, 
                                  :search_types, :static_failure, :converge, 
                                  :pause, :flush_end, :num_nodes)
class Settings
  def to_s
   "# Settings---\n# addr_space: #{addr_space}\n# join_first?: #{join_first}\n" +
   "# mxt: #{mxt}\n# mlt: #{mlt}\n# mrt: #{mrt}\n" + 
   "# mst: #{mst}\n# search_types: #{search_types}\n" +
   "# static_failure: #{static_failure}\n# converge: #{converge}\n" +
   "# flush_end: #{flush_end}\n# num_nodes: #{num_nodes}\n"
  end
end

settings = Settings.new(2**160, false, 0, 0, 0, 0, 0, 0, 
                        DEFAULT_SEARCH_TYPE, DEFAULT_STATIC_FAILURE, 
                        false, 0, -1, 0)

filename = nil
length = 0
id_type = "Random"
opts.each do | opt, arg |
  case opt
  when '--help'
    RDoc::usage
  when '--filename'
    filename = arg
  when '--sim-max-length'
    length = arg.to_i
  when '--address-space'
    settings.addr_space = arg.to_i
  when '--num-nodes'
    settings.num_nodes = arg.to_i
  when '--all-joins-first'
    settings.join_first = true
  when '--mean-session-time'
    settings.mxt = arg.to_f
  when '--mean-leave-time'
    settings.mlt = arg.to_f
  when '--mean-rejoin-time'
    settings.mrt = arg.to_f
  when '--mean-search-time'
    settings.mst = arg.to_f
  when '--search-types'
    settings.search_types = arg
  when '--static-failure'
    settings.static_failure = arg
  when '--converge-before-search'
    settings.converge = true
    settings.join_first = true
  when '--pause-after-joins'
    settings.pause = arg.to_i
    settings.join_first = true
  when '--end-of-trace-flush'
    settings.flush_end = arg.to_i
  when '--id-type'
    id_type = arg.capitalize
  end
end

rand = eval("IDGens::#{id_type}.new(settings)")

if(settings.flush_end >= 0 && length == 0)
  puts "Must specify --sim-max-length when using the --end-of-trace-flush " +
       "option\n"
  exit(0)
end

if(settings.addr_space == 0)
  printf("Need to specify at least --address-space.\n")
  exit(0)
end

if(settings.join_first && settings.num_nodes == 0)
  printf("Must specify --num-nodes when using the --all-joins-first option.\n")
  exit(0)
end

if(settings.mxt && settings.num_nodes == 0)
  puts "Must provide the number of nodes to use --mean-session-time"
  exit(0)
end

if(length == 0)
  printf("WARN: generating an infinite trace.\n")
#else
#  Killer.new(length)
end

if(settings.static_failure != DEFAULT_STATIC_FAILURE)
  time, pct = settings.static_failure.split(":")
  StaticFailureHandler.new(time.to_i, pct.to_f)
end

# Set the filename if one wasn't given
filename ||= File.join('workloads', "a#{settings.addr_space}-n#{settings.num_nodes}-j#{settings.mjt}.wl")

file = Zlib::GzipWriter.open(filename)
file.write(settings)
file.write("# sim_length: #{length}\n")

settings.search_types = parse_search_types(settings.search_types)

WLPrinter.instance.init(GoSim::Simulation::instance, file)

GSL::Rng.env_setup
$R = GSL::Rng.alloc("mt19937")

class NodeList
  include Singleton

  attr_accessor :nodes

  def random_live_node
    n = nil
    while((n = @nodes.rand).left == true)
    end
    return n
  end
end

class NodeFactory < GoSim::Entity
  def initialize(id_gen, settings)
    super()

    @id_gen = id_gen
    @num_nodes, @settings = settings.num_nodes, settings
    @num_nodes = -1  if @num_nodes == 0   # Generating an inifinite number

    # Calculate mjt and mft
    #@settings.mft = @settings.mxt
    if(@settings.mxt != 0)
      @settings.mlt = @settings.mxt
      @settings.mjt = @settings.mlt / @num_nodes
    end

    NodeList.instance.nodes = []
    @wl = WLPrinter.instance
    @node_ids = []

    @sim.schedule_event(:node_gen, @sid, 
                        $R.poisson(@settings.mjt).round, nil)
  end

  def node_ids
    return NodeList.instance.nodes.map { | x | x.id }
  end

  def node_gen(e)
    nodes = NodeList.instance.nodes

    if nodes.length == @settings.addr_space
      printf("ERROR: Address space full.\n")
      exit(1)
    end

    nids = (@settings.join_first ? @node_ids : node_ids())
    if(nids.length < @num_nodes || @settings.mxt != 0)
      while(nids.include?(node_id = @id_gen.gen()))  
      end
      @wl.printf("%d init %d\n", node_id, node_id)
      @node_ids << node_id                     if @settings.join_first
      nodes << NodeObj.new(node_id, @settings)  unless @settings.join_first
    end

    @sim.schedule_event(:node_gen, @sid, 
                        $R.poisson(@settings.mjt).round, nil)
    if(@node_ids.length == @num_nodes && @settings.join_first)
      spawn_nodes()
      @settings.join_first = false
      @settings.mjt = 1 # Assures progress
      if(@settings.converge)
        @wl.printf("converge\n")
        @wl.set_pause_point()
      end
      if(@settings.pause != 0)
        @wl.printf("pause #{@settings.pause}\n")
        @wl.set_pause_point()
      end
    end
  end

  private

  def spawn_nodes
    nodes = NodeList.instance.nodes
    @node_ids.each { | n | nodes << NodeObj.new(n, @settings) }
  end
end

class NodeObj < GoSim::Entity
  attr_accessor :left, :id

  def initialize(id, settings)
    super()

    @id, @settings = id, settings
    @left = false
    
    @wl = WLPrinter.instance

    if @settings.mft != 0 
      @sim.schedule_event(:failure, @sid, 
                          $R.uniform_int(@settings.mft * 2).round, nil)  
    end

    if @settings.mlt != 0
      @sim.schedule_event(:leave, @sid, 
                          $R.poisson(@settings.mlt).round, nil)  
    end

    if @settings.mst != 0    
      wait = $R.uniform_int(@settings.mst * 2).round
#      wait = $R.poisson(@settings.mst).round
      @sim.schedule_event(:send, @sid, wait, nil)     
    end
  end

  def send(e)
    type = choose_search_method(@settings.search_types)
    if(!@left && !type.nil?)
      while((id = NodeList::instance.random_live_node.id) == @id); end
      @wl.printf("%d search_%s %d\n", @id, type.name, id) 
    end
    @sim.schedule_event(:send, @sid, 
                        $R.poisson(@settings.mst).round, nil)
  end

  def failure(e)
    return  if @left == true

    @wl.printf("%d failure\n", @id)

    @left = true
    if @settings.mrt != 0 && e.nil?
      @sim.schedule_event(:recover, @sid, 
                          $R.poisson(@settings.mrt).round, nil)
    end
  end

  def leave(e)
    @wl.printf("%d leave\n", @id)
    @left = true
    NodeList.instance.nodes.delete(self)
  end
  
  def recover(e)
    @wl.printf("%d recover\n", @id)
    @left = false
    @sim.schedule_event(:failure, @sid, 
                        $R.poisson(@settings.mft).round, nil)
  end
end

NodeFactory.new(rand, settings)
if length != 0
  GoSim::Simulation.run(length)
else
  GoSim::Simulation.run()
end

if(settings.flush_end >= 0)
  WLPrinter::instance.printf("flush %d", settings.flush_end)
end

WLPrinter.instance.flush()
