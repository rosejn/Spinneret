#!/usr/bin/env ruby

# == Synopsis
#
# gen_rand_topo: Generates random topologies using various models.  For now
# supports the Kleinberg model (see Kleinberg 99, "The Small-World Phenomenon:
# An Algorithmic Perspective").
#
# == Usage
#
# -h, --help:
#    Show this help.
#
# -o filename, --output filename
#
# -p scheme, --placement-scheme scheme
#    Defines the placement scheme.  Defaults to
#       kleinberg:1:1:2.0:10
#    Use -l to list available schemes.
#
# -l, --list-placement-schemes
#    Lists the available placement schemes and their parameters.
#
# -v, --verbose
#    Turn on status output.

require 'rdoc/usage'
require 'getoptlong'

require 'rubygems'
require 'gsl'

require 'spinneret'

require 'stream_types'

$verbose = false

opts = GetoptLong.new(
        ['--help',                   '-h', GetoptLong::NO_ARGUMENT],
        ['--output',                 '-o', GetoptLong::REQUIRED_ARGUMENT],
        ['--placement-scheme',       '-p', GetoptLong::REQUIRED_ARGUMENT],
        ['--list-placement-schemes', '-l', GetoptLong::NO_ARGUMENT],
        ['--verbose',                '-v', GetoptLong::NO_ARGUMENT])

class RandomGraphScheme
  def initialize(args)
    args = args.split(':')
    @settings = {}
    arg_order.split(':').each { | arg | @settings[arg.to_sym] = args.shift }
  end

  def arg_order
    throw "arg_order not implimented."
  end

  def write(stream)
    throw "write not implimented."
  end

  def generate
    throw "generate not implimented."
  end
end

class Array
  def to_d
    "#{self[0]}#{self[1]}"
  end
end

class Kleinberg < RandomGraphScheme
  @@arg_order = "p:q:r:dim"

  def Kleinberg.usage
    puts "Kleinberg's model has four parameters (defaults in parens):\n" +
         "  p\tlattice distance radius for local nodes (p = 1)\n" +
         "  q\tnumber of long-distance links (q = 1)\n" +
         "  r\tprobability mass exponent (r = 2)\n" +
         "  dim\tlattice dimensions (r = 10, ie. 10x10 = 100 verts)\n" +
         "Each edges is selected using an independent random trial, where " +
         "the probability\nmass of edge (v, u) is d(v,u)^{-r}.  These " +
         "masses are then weighted by\n\\sum_v{d(v,u)^{-r}} to find the " +
         "probability distribution.  By default, the\noptimal r is used " +
         "with p = q = 1.  The arguments are given in the following\n" +
         "order: #{@@arg_order}"
  end

  def initialize(args)
    super(args)

    [:dim, :p, :q].each { | s | @settings[s] = @settings[s].to_i }
    [:r].each           { | s | @settings[s] = @settings[s].to_f }

    @graph = DirectedAdjacencyGraph.new()
  end

  def arg_order
    return @@arg_order
  end

  def generate()
    create_verts()

    @graph.each_vertex do | v |
      # Add local edges
      add_local_edges(v, v, @settings[:p])

      # Add long-distance edges
      prob_dist = Kleinberg::EdgeDist::new(v, @graph.vertices, @settings[:r])

      @settings[:q].times do
        u = prob_dist.rand()
        @graph.add_edge(v, u) #prob_dist.rand())
      end
    end
  end

  def write(stream)
    stream << @graph.to_dot
  end

  private

  def add_local_edges(target_v, cur_v, p)
    @graph.add_edge(target_v, cur_v) unless target_v == cur_v

    return if p == 0

    next_v = [cur_v[0] - 1, cur_v[1]]
    add_local_edges(target_v, next_v, p - 1) if valid_vertex?(next_v)
    next_v = [cur_v[0] + 1, cur_v[1]]
    add_local_edges(target_v, next_v, p - 1) if valid_vertex?(next_v)
    next_v = [cur_v[0], cur_v[1] - 1]
    add_local_edges(target_v, next_v, p - 1) if valid_vertex?(next_v)
    next_v = [cur_v[0], cur_v[1] + 1]
    add_local_edges(target_v, next_v, p - 1) if valid_vertex?(next_v)
  end

  def valid_vertex?(v)
    return (v[0] < @settings[:dim] && v[0] >= 0 &&
            v[1] < @settings[:dim] && v[1] >= 0)
  end

  def create_verts()
    verts = []
    @settings[:dim].times do | i |
      @settings[:dim].times do | j |
        @graph.add_vertex([i, j])
      end
    end
  end

  class EdgeDist
    def initialize(v, verts, r)
      prob_mass = 0.0
      @u_probs = []

      verts.each do | u |
        next if v == u

        mass = 1.0 / (lattice_distance(v, u) ** r)
        prob_mass += mass
        @u_probs << [u, mass]
      end

      @u_probs.map! { | event | [event[0], event[1] / prob_mass] }
    end

    def rand
      prob_sum = 0.0
      roll = Kernel::rand()

      event = @u_probs.detect { | e | prob_sum += e[1]; roll < prob_sum }

      if event.nil?
        raise "Kleinberg::EdgeDist::rand: event should not be nil." 
      end

      return event[0]
    end

    private

    def lattice_distance(v, u)
      return ((u[0] - v[0]).abs + (u[1] - v[1]).abs)
    end
  end  # EdgeDist

end # Kleinberg

class Constdegree < RandomGraphScheme
  @@arg_order = "v:e"

  def Constdegree.usage
    puts "The in-degree constant model has two parameters (defaults in " + 
         "parens):\n" +
         "  v\tnumber of vertices\n" +
         "  e\tnumber of edges\n" +
         "Vertices are numbered from 0 to v.  v is rounded upwards so that " +
         "v % e = 0,\ni.e. all nodes have equal numbers of in-edges.  " +
         "Out-degree is assumed to be\nconstant.  The probability mass of " +
         "edge (v, u) is (e - |u|)^{-2}, where |u|\nis the number of in-edges." +
         "  This is normalized over all (v, u).  The arguments\nare given " +
         "in the following order: #{@@arg_order}"
  end

  def initialize(args)
    super(args)

    [:v, :e].each { | s | @settings[s] = @settings[s].to_i }
    # Make sure that the number of edges evenly devides the number of verts
    if @settings[:v] % @settings[:e] != 0
      @settings[:v] = ((@settings[:v] / @settings[:e]) + 1) * @settings[:e]
    end

    puts "|V|: #{@settings[:v]}, |E|: #{@settings[:e]}" if $verbose

    @graph = DirectedAdjacencyGraph.new()
  end

  def arg_order
    return @@arg_order
  end

  def write(stream)
    stream << @graph.to_dot
  end

  def generate
    # Create vertices
    @settings[:v].times { | v | @graph.add_vertex(v) }

    # Create edges
    prob_dist = Constdegree::ExponentialEdgeDist::new(@graph.vertices, 
                                                      @settings[:e])
    @settings[:e].times do | i |
      puts i+1  if $verbose
      @graph.each_vertex do | v |
        u = prob_dist.rand 
        j = 0
        while u == v || 
              !@graph.adjacent_vertices(v).detect { | x | x == u }.nil?
          # makes sure we exit - otherwise a node may loop here on the very 
          # last selection, due to a multi-edge - can slightly skew results
          # for smaller topologies
          if(j > 1000 &&
             prob_dist.sub_d_vertices.length < @settings[:e] && 
             i + 1 == @settings[:e])
            puts "WARN: early exit from graph gen loop, miss-balanced edges."
            break
          end
                                   
          u = prob_dist.rand
          j += 1      
        end

        prob_dist.update(u)
        @graph.add_edge(v, u)
      end
    end
  end

  class EdgeDist
    def initialize(verts, num_edges)
      @in_edge_count = {}
      @num_edges = num_edges
      verts.each { | v | @in_edge_count[v] = 0 }
    end

    def update(v)
      @in_edge_count[v] += 1
    end
  end

  # Not used for now - was a test.  Runs into cases where final assignment
  # hangs a little more often than the Exponential version
  class FlatEdgeDist < EdgeDist
    def mass
      return @in_edge_count.inject(0) do | mass, pair | 
        pair[1] < @num_edges ? mass += 1 : mass
      end.to_f
    end

    def sub_d_vertices
      return @in_edge_count.inject([]) do | pad, pair | 
        pair[1] < @num_edges ? pad << pair[0] : pad 
      end
    end
    
    def rand
      tot_mass = mass

      u_probs = []
      @in_edge_count.each do | key, val | 
        u_probs << [key, 1.0 / tot_mass]  if val < @num_edges
      end

      prob_sum = 0.0
      roll = Kernel::rand()
      event = u_probs.detect { | e | prob_sum += e[1]; roll < prob_sum }
      
      if event.nil?
        raise "Constdegree::FlatEdgeDist::rand: event should not be nil." 
      end

      return event[0]
    end
  end

  class ExponentialEdgeDist < EdgeDist
    def mass
      @in_edge_count.inject(0.0) do | mass, pair | 
        pair[1] < @num_edges ? mass + (@num_edges - pair[1]) : mass
      end.to_f
    end

    def sub_d_vertices
      return @in_edge_count.inject([]) do | pad, pair | 
        pair[1] < @num_edges ? pad << pair[0] : pad 
      end
    end

    def rand
      tot_mass = mass
      u_probs = []
      @in_edge_count.each do | key, val | 
        u_probs << [key, (@num_edges - val) / tot_mass] 
      end

      prob_sum = 0.0
      roll = Kernel::rand()
      event = u_probs.detect { | e | prob_sum += e[1]; roll < prob_sum }
      
      if event.nil?
        raise "Constdegree::ExpEdgeDist::rand: event should not be nil." 
      end

      return event[0]
    end
  end

end

def puts(str)
  $stderr.puts str
end


topo = "kleinberg:1:1:2.0:10"
output = $stdout
opts.each do | opt, arg |
  case opt
  when '--help'
    RDoc::usage
    exit(0)
  when '--output'
    output = get_output_stream(arg)
  when '--placement-scheme'
    topo = arg
  when '--list-placement-schemes'
    puts "-- kleinberg"
    Kleinberg::usage()
    puts "\n-- constdegree"
    Constdegree::usage()
    exit(0)
  when '--verbose'
    $verbose = true
  end
end

delim = topo.index(':')
topo = eval "#{topo[0...delim].capitalize}.new(topo[(delim + 1)..-1])"

if(topo.nil? || output.nil?)
  RDoc::usage
  exit(-1)
end

topo.generate
topo.write(output)
output.close
